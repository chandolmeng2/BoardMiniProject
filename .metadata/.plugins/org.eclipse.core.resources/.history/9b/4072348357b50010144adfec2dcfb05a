package com.example.board.post.controller;

import com.example.board.post.domain.Post;
import com.example.board.post.service.PostService;

import lombok.RequiredArgsConstructor;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api/boards") // <<== 이게 필요!
@CrossOrigin(origins = "http://localhost:3000")
public class PostController {

	private final PostService postService;

	@GetMapping
	public List<Post> getAllPosts() {
		return postService.findAllPosts();
	}

	@GetMapping("/{id}")
	public ResponseEntity<Post> getPostById(@PathVariable("id") Long id) {
		return postService.getPostById(id).map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
	}

	@PostMapping
	public ResponseEntity<Post> createPost(@RequestBody Post post) {
		Post created = postService.createPost(post);
		return ResponseEntity.status(HttpStatus.CREATED).body(created);
	}

	@PutMapping("/{id}")
	public ResponseEntity<Post> updateBoard(@PathVariable("id") Long id, @RequestBody Post updatedPost) {
		return postService.updatePost(id, updatedPost).map(ResponseEntity::ok)
				.orElse(ResponseEntity.notFound().build());
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deletePost(@PathVariable("id") Long id) {
		boolean deleted = postService.deletePost(id);
		if (deleted) {
			return ResponseEntity.noContent().build();
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@PostMapping("/{id}/like")
    public ResponseEntity<Post> toggleLike(@PathVariable Long id) {
        Post updatedPost = postService.toggleLike(id);
        return ResponseEntity.ok(updatedPost);
    }

    @PostMapping("/{id}/dislike")
    public ResponseEntity<Post> toggleDislike(@PathVariable Long id) {
        Post updatedPost = postService.toggleDislike(id);
        return ResponseEntity.ok(updatedPost);
    }

}
